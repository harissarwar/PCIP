<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
  xmlns:s="library://ns.adobe.com/flex/spark" 
  xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
  xmlns:vo="bytesol.pcip.vo.*"
  creationComplete="onCreation(event)"
  enabled="{model.loggedUser != ''}" 
  >
  <s:layout>
    <s:VerticalLayout/>
  </s:layout>
  <fx:Script>
  <![CDATA[
    import bytesol.pcip.model.AppModel;
    import bytesol.pcip.vo.UserData;
    
    import mx.binding.utils.ChangeWatcher;
    import mx.controls.Alert;
    import mx.events.ColorPickerEvent;
    import mx.events.FlexEvent;
    import mx.utils.ObjectUtil;
    import mx.utils.StringUtil;
    
    import spark.events.IndexChangeEvent;
    
    [Bindable]
    private var model:AppModel = AppModel.getInstance();;
    
    protected function onCreation(event:FlexEvent):void
    {
      ChangeWatcher.watch(model, "loggedUser", refresh);      
      ChangeWatcher.watch(model, "selElement", onSeatSelChange);
    } 
    
    protected function onSeatSelChange(e:Event):void
    {
      grid.selectedIndex = -1;
      if(model.selElement)
        model.userData.filterFunction = filterSeat;
      else
        model.userData.filterFunction = null;
      model.userData.refresh();
    }
    
    protected function filterSeat(obj:Object):Boolean
    {
      var usrData:UserData = obj as UserData;
      if(usrData)
        return usrData.seat == model.selElement.id;
      return false;
    }
    
    public function refresh(e:Event):void
    {
      if(model.loggedUser == "") return;
      grid.selectedIndex = -1;
      model.userData.removeAll();
      cbTags.selectedIndex = -1;
      model.tags.removeAll();
      model.layers.removeAll();
      layer.send();
    }
        
    protected function onSuccess(event:Event):void
    {
      try
      {
        var http:MyHttpService = event.target as MyHttpService;
        if(http.statusCode != 200) throw new Error("not ok");
        var obj:Object = JSON.parse(http.response as String);
//        trace(ObjectUtil.toString(obj));
        var val:Object = null;
        var ud:UserData = null;
        var i:int;
        if(http == layer)
        {
          model.tags.removeAll();
          model.layers.removeAll();
          for each(val in obj)
            model.layers.addItem(val["name"] as String);              
        }
        else if(http == tags)
        {
          model.tags.removeAll();
          for each(val in obj)
            model.tags.addItem(val["tag"] as String);              
        }
        else if(http == userData)
        {
          model.userData.removeAll();
          for each(val in obj)
          {
            ud = new UserData();
            ud.id = int(val["id"]);
            ud.seat = val["seat"];
            ud.tag = val["tag"];
            ud.value = val["value"];
            model.userData.addItem(ud);
            if(ud.tag == model.TAG_COLOR)
              model.updateColor(ud.seat, ud.value);
          }
        }
        else if(http == add)
        {
          if(obj["error"] != "0")
          {            
            Alert.show("Unable to add user data.", "User Data");
            return;
          }
          txtValue.text = ""
          ud = new UserData();
          ud.id = int(obj["id"]);
          ud.seat = obj["seat"];
          ud.tag = obj["tag"];
          ud.value = obj["value"];
          model.userData.addItemAt(ud, 0);
          if(ud.tag == model.TAG_COLOR)
            model.updateColor(ud.seat, ud.value);
        }
        else if(http == del)
        {
          if(obj.hasOwnProperty("error") && obj.error == 0)
          {
            grid.selectedIndex = -1;
            for (i = 0; i < model.userData.length; i++)
            {
              ud = model.userData.getItemAt(i) as UserData;
              if(ud.id == int(obj["id"]))
              {
                model.userData.removeItemAt(i);
                if(ud.tag == model.TAG_COLOR)
                  model.updateColor(ud.seat, "");
                break;
              }
            }
          }
          else
          {
            Alert.show("Unable to delete user data.", "User Data");
          }
        }
        else if(http == update)
        {
          if(obj.hasOwnProperty("error") && obj.error == 0)
          {
            for (i = 0; i < model.userData.length; i++)
            {
              ud = model.userData.getItemAt(i) as UserData;
              if(ud.id == int(obj["id"]))
              {
                ud.seat = obj["seat"];
                ud.tag = obj["tag"];
                ud.value = obj["value"];                
                if(ud.tag == model.TAG_COLOR)
                  model.updateColor(ud.seat, ud.value);
                break;
              }
            }
          }
          else
          {
            Alert.show("Unable to update color.", "Color Update");
          }
        }
      }
      catch(err:Error)
      {
        Alert.show("Unable to get data from server.", "Server Error");
      }
    }    
    
    protected function onFail(title:String):void
    {
      Alert.show("Unable to perform requested operation.", title);      
    }    
    
    protected function onLayerChange(event:IndexChangeEvent):void
    {
      model.selLayer = cbLayers.selectedIndex;
      model.selElement = null;
      
      if(cbLayers.selectedIndex < 0) return;
      var str:String = model.layers.getItemAt(cbLayers.selectedIndex) as String;
      model.tags.removeAll();
      cbTags.selectedIndex = -1;
      tags.send("layer=" + str);
      grid.selectedIndex = -1;
      model.userData.removeAll();
      userData.send("layer=" + str);
    }
    
    protected function onAdd(event:Event):void
    {
      var data:String = StringUtil.substitute(
        "UserData[seat]={0}&UserData[layer]={1}&UserData[tag]={2}&UserData[value]={3}&yt0=Create", 
        txtSeat.text, 
        model.layers.getItemAt(cbLayers.selectedIndex) as String, 
        model.tags.getItemAt(cbTags.selectedIndex) as String, 
        txtValue.text);
      add.send(data);      
    }
    
    protected function onDel(event:MouseEvent):void
    {
      var obj:UserData = grid.selectedItem as UserData;
      if(obj)
      {
        del.url = model.URL_DEL_DATA + "/" + obj.id;
        del.send();
      }
    }
    
    protected function onColorChange(event:ColorPickerEvent):void
    {
//      var ct:ColorTransform = new ColorTransform();
//      ct.color = event.color;
//      model.selElement.transform.colorTransform = ct;
//      model.selColor = event.color;
      var ud:UserData = null;
      var data:String;
      for each(ud in model.userData)
      {
        if(ud.tag == model.TAG_COLOR)
        {
          ud.value = event.color.toString(16);
          update.url = model.URL_UPDATE_DATA + "/" + ud.id;
          data = StringUtil.substitute(
            "UserData[seat]={0}&UserData[layer]={1}&UserData[tag]={2}&UserData[value]={3}&yt0=Save", 
            txtSeat.text, 
            model.layers.getItemAt(cbLayers.selectedIndex) as String, 
            model.TAG_COLOR, 
            event.color.toString(16));
          update.send(data);   
//          model.updateColor(txtSeat.text, event.color.toString(16));
          return;
        }
      }
      data = StringUtil.substitute(
        "UserData[seat]={0}&UserData[layer]={1}&UserData[tag]={2}&UserData[value]={3}&yt0=Create", 
        txtSeat.text, 
        model.layers.getItemAt(cbLayers.selectedIndex) as String, 
        model.TAG_COLOR, 
        event.color.toString(16)
      );
      add.send(data);      
    }
  ]]>
  </fx:Script>
  <fx:Declarations>
    <vo:MyHttpService id="layer" url="{model.URL_LAYERS}" success="onSuccess(event)" fail="onFail('Layer Error')"/>
    <vo:MyHttpService id="tags" url="{model.URL_TAGS}" success="onSuccess(event)" fail="onFail('Tags Error')"/>
    <vo:MyHttpService id="userData" url="{model.URL_USER_DATA}" success="onSuccess(event)" fail="onFail('Tags Error')"/>
    <vo:MyHttpService id="add" url="{model.URL_ADD_DATA}" success="onSuccess(event)" fail="onFail('Add User Data Error')"/>
    <vo:MyHttpService id="update" url="{model.URL_UPDATE_DATA}" success="onSuccess(event)" fail="onFail('Update Error')"/>
    <vo:MyHttpService id="del" success="onSuccess(event)" fail="onFail('Del User Data Error')"/>
  </fx:Declarations>
  <s:HGroup width="100%" verticalAlign="middle">
    <s:Label text="Layer :" width="60" fontWeight="bold"/>
    <s:DropDownList id="cbLayers" selectedIndex="{model.selLayer}" change="onLayerChange(event)" dataProvider="{model.layers}" width="100%"/>
  </s:HGroup>
  <s:HGroup width="100%" verticalAlign="middle">
    <s:Label text="Seat :" width="60" fontWeight="bold"/>
    <s:TextInput id="txtSeat" width="100%" 
      text="{model.selSeat}" 
      maxChars="128"  
      editable="false"
      focusEnabled="false"
      />
    <mx:ColorPicker id="cp" showTextField="true" 
      enabled="{model.loggedUserType != model.READ_ONLY_USR_TYPE &amp;&amp; txtSeat.text != '' &amp;&amp; cbLayers.selectedIndex > -1}"
      selectedColor="{model.selColor}"
      change="onColorChange(event)"
      toolTip="Changes seat color."
      />
  </s:HGroup>
  <s:HGroup width="100%" verticalAlign="middle">
    <s:Label text="Tag :" width="60" fontWeight="bold"/>
    <s:DropDownList id="cbTags" dataProvider="{model.tags}" width="100%"/>
  </s:HGroup>
  <s:HGroup width="100%" verticalAlign="middle">
    <s:Label text="Value :" width="60" fontWeight="bold"/>
    <s:TextInput id="txtValue" text="" maxChars="128" width="100%" enter="onAdd(event)"/>
  </s:HGroup>
  <s:HGroup width="100%" verticalAlign="middle">
    <s:Button width="50%" height="30" label="Add" 
      enabled="{model.loggedUserType != model.READ_ONLY_USR_TYPE &amp;&amp;
      model.selElement != null &amp;&amp; 
      cbLayers.selectedIndex >=0 &amp;&amp; 
      cbTags.selectedIndex >= 0 &amp;&amp;
      txtValue.text.length > 0}"
      click="onAdd(event)"
      />
    <s:Button width="50%" height="30" label="Del" 
      enabled="{model.loggedUserType != model.READ_ONLY_USR_TYPE &amp;&amp; grid.selectedIndex >= 0}"
      click="onDel(event)"
      />
  </s:HGroup>
  <s:DataGrid id="grid" width="100%" height="100%" dataProvider="{model.userData}">
    <s:columns>
      <s:ArrayList>
        <s:GridColumn dataField="seat" width="60" headerText="Seat"/>
        <s:GridColumn dataField="tag"  width="140" headerText="Tag"/>
        <s:GridColumn dataField="value" headerText="Value"/>
      </s:ArrayList>
    </s:columns>
  </s:DataGrid>
</s:Group>
